name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14, 16, 18] # Test against multiple Node.js versions

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

  lint:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Run linter
      run: npm run lint

  deploy:
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: github.ref == 'refs/heads/main' # Only deploy on main branch

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Build the application
      run: npm run build

    - name: Deploy to Production
      env:
        NODE_ENV: production
        API_KEY: ${{ secrets.API_KEY }} # Example of using secrets
      run: |
        npm run deploy # Customize this command based on your deployment process

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always() # Always run notify job

    steps:
    - name: Notify Deployment
      run: |
        if [[ ${{ job.status }} == 'success' ]]; then
          echo "Deployment completed successfully!"
        else
          echo "Deployment failed!"
          exit 1
        fi

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration

  e2e:
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: github.ref == 'refs/heads/main' # Only run E2E tests on the main branch

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Run end-to-end tests
      run: npm run test:e2e

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/tags/v*' # Trigger on version tags

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        files: |
          dist/**
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub
